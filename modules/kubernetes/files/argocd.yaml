global:
  addPrometheusAnnotations: true
  deploymentAnnotations:
    secret.reloader.stakater.com/reload: oidc
  domain: ${domain}
applicationSet:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi
controller:
  emptyDir:
    sizeLimit: 500Mi
  replicas: 2
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1024Mi
notifications:
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi
redis:
  enabled: false
redis-ha:
  enabled: true
  haproxy:
    resources:
      limits:
        memory: 500Mi
        cpu: 500m
      requests:
        cpu: 250m
        memory: 256Mi
  redis:
    resources:
      limits:
        cpu: 500m
        memory: 700Mi
      requests:
        memory: 200Mi
        cpu: 100m
repoServer:
  autoscaling:
    enabled: true
    minReplicas: 2
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 256Mi
dex:
  enabled: false
server:
  autoscaling:
    enabled: true
    minReplicas: 2
  resources:
    requests:
      cpu: 50m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 512Mi
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: HTTP
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: ${cluster_issuer}
      gethomepage.dev/description: Get stuff done with Kubernetes!
      gethomepage.dev/enabled: "true"
      gethomepage.dev/group: Cluster
      gethomepage.dev/icon: argocd
      gethomepage.dev/name: ArgoCD
      gethomepage.dev/widget.type: argocd
      gethomepage.dev/widget.url: http://argocd-server.argocd.svc.cluster.local
      gethomepage.dev/widget.key: "{{HOMEPAGE_VAR_ARGOCD_KEY}}"
    tls: true
    extraTLS:
      - hosts:
          - ${domain}
        secretName: argocd-tls
configs:
  cm:
    admin.enabled: false
    oidc.config: |-
      ${indent(6, yamlencode(oidc_config))}
    oidc.tls.insecure.skip.verify: ${oidc_tls_skip_verify}
    statusbadge.enabled: true
    url: https://${domain}
    ${indent(4, additional_users)}
  params:
    server.insecure: true
  rbac:
    create: true
    policy.csv: |
      ${indent(6, policy)}
